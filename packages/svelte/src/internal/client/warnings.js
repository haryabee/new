/* This file is generated by scripts/process-messages/index.js. Do not edit! */

import { DEV } from 'esm-env';

var bold = 'font-weight: bold';
var normal = 'font-weight: normal';

/**
 * Assignment to `%property%` property (%location%) will evaluate to the right-hand side, not the value of `%property%` following the assignment. This may result in unexpected behaviour.
 * @param {string} property
 * @param {string} location
 */
export function assignment_value_stale(property, location) {
	if (DEV) {
		console.warn(`%c[svelte] assignment_value_stale\n%cAssignment to \`${property}\` property (${location}) will evaluate to the right-hand side, not the value of \`${property}\` following the assignment. This may result in unexpected behaviour.\nSee https://svelte.dev/e/assignment_value_stale for more info`, bold, normal);
	} else {
		console.warn(`assignment_value_stale (https://svelte.dev/e/assignment_value_stale)`);
	}
}

/**
 * `%binding%` (%location%) is binding to a non-reactive property
 * @param {string} binding
 * @param {string | undefined | null} [location]
 */
export function binding_property_non_reactive(binding, location) {
	if (DEV) {
		console.warn(`%c[svelte] binding_property_non_reactive\n%c${location ? `\`${binding}\` (${location}) is binding to a non-reactive property` : `\`${binding}\` is binding to a non-reactive property`}\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infoownership_invalid_mutation for more info`, bold, normal);
	} else {
		console.warn(`binding_property_non_reactive (https://svelte.dev/e/binding_property_non_reactive)`);
	}
}

/**
 * Your `console.%method%` contained `$state` proxies. Consider using `$inspect(...)` or `$state.snapshot(...)` instead
 * @param {string} method
 */
export function console_log_state(method) {
	if (DEV) {
		console.warn(`%c[svelte] console_log_state\n%cYour \`console.${method}\` contained \`$state\` proxies. Consider using \`$inspect(...)\` or \`$state.snapshot(...)\` instead\nSee https://svelte.dev/e/binding_property_non_reactive for more infoconsole_log_state for more info`, bold, normal);
	} else {
		console.warn(`console_log_state (https://svelte.dev/e/console_log_state)`);
	}
}

/**
 * %handler% should be a function. Did you mean to %suggestion%?
 * @param {string} handler
 * @param {string} suggestion
 */
export function event_handler_invalid(handler, suggestion) {
	if (DEV) {
		console.warn(`%c[svelte] event_handler_invalid\n%c${handler} should be a function. Did you mean to ${suggestion}?\nSee https://svelte.dev/e/binding_property_non_reactive for more infoevent_handler_invalid for more info`, bold, normal);
	} else {
		console.warn(`event_handler_invalid (https://svelte.dev/e/event_handler_invalid)`);
	}
}

/**
 * The `%attribute%` attribute on `%html%` changed its value between server and client renders. The client value, `%value%`, will be ignored in favour of the server value
 * @param {string} attribute
 * @param {string} html
 * @param {string} value
 */
export function hydration_attribute_changed(attribute, html, value) {
	if (DEV) {
		console.warn(`%c[svelte] hydration_attribute_changed\n%cThe \`${attribute}\` attribute on \`${html}\` changed its value between server and client renders. The client value, \`${value}\`, will be ignored in favour of the server value\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_attribute_changed for more info`, bold, normal);
	} else {
		console.warn(`hydration_attribute_changed (https://svelte.dev/e/hydration_attribute_changed)`);
	}
}

/**
 * The value of an `{@html ...}` block %location% changed between server and client renders. The client value will be ignored in favour of the server value
 * @param {string | undefined | null} [location]
 */
export function hydration_html_changed(location) {
	if (DEV) {
		console.warn(`%c[svelte] hydration_html_changed\n%c${location ? `The value of an \`{@html ...}\` block ${location} changed between server and client renders. The client value will be ignored in favour of the server value` : "The value of an `{@html ...}` block changed between server and client renders. The client value will be ignored in favour of the server value"}\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infoownership_invalid_mutation for more info`, bold, normal);
	} else {
		console.warn(`hydration_html_changed (https://svelte.dev/e/hydration_html_changed)`);
	}
}

/**
 * Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near %location%
 * @param {string | undefined | null} [location]
 */
export function hydration_mismatch(location) {
	if (DEV) {
		console.warn(`%c[svelte] hydration_mismatch\n%c${location ? `Hydration failed because the initial UI does not match what was rendered on the server. The error occurred near ${location}` : "Hydration failed because the initial UI does not match what was rendered on the server"}\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infoownership_invalid_mutation for more info`, bold, normal);
	} else {
		console.warn(`hydration_mismatch (https://svelte.dev/e/hydration_mismatch)`);
	}
}

/**
 * The `render` function passed to `createRawSnippet` should return HTML for a single element
 */
export function invalid_raw_snippet_render() {
	if (DEV) {
		console.warn(`%c[svelte] invalid_raw_snippet_render\n%cThe \`render\` function passed to \`createRawSnippet\` should return HTML for a single element\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infoinvalid_raw_snippet_render for more info`, bold, normal);
	} else {
		console.warn(`invalid_raw_snippet_render (https://svelte.dev/e/invalid_raw_snippet_render)`);
	}
}

/**
 * Detected a migrated `$:` reactive block in `%filename%` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an `$effect`.
 * @param {string} filename
 */
export function legacy_recursive_reactive_block(filename) {
	if (DEV) {
		console.warn(`%c[svelte] legacy_recursive_reactive_block\n%cDetected a migrated \`$:\` reactive block in \`${filename}\` that both accesses and updates the same reactive value. This may cause recursive updates when converted to an \`$effect\`.\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infolegacy_recursive_reactive_block for more info`, bold, normal);
	} else {
		console.warn(`legacy_recursive_reactive_block (https://svelte.dev/e/legacy_recursive_reactive_block)`);
	}
}

/**
 * Tried to unmount a component that was not mounted
 */
export function lifecycle_double_unmount() {
	if (DEV) {
		console.warn(`%c[svelte] lifecycle_double_unmount\n%cTried to unmount a component that was not mounted\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infolifecycle_double_unmount for more info`, bold, normal);
	} else {
		console.warn(`lifecycle_double_unmount (https://svelte.dev/e/lifecycle_double_unmount)`);
	}
}

/**
 * %parent% passed a value to %child% with `bind:`, but the value is owned by %owner%. Consider creating a binding between %owner% and %parent%
 * @param {string} parent
 * @param {string} child
 * @param {string} owner
 */
export function ownership_invalid_binding(parent, child, owner) {
	if (DEV) {
		console.warn(`%c[svelte] ownership_invalid_binding\n%c${parent} passed a value to ${child} with \`bind:\`, but the value is owned by ${owner}. Consider creating a binding between ${owner} and ${parent}\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infoownership_invalid_binding for more info`, bold, normal);
	} else {
		console.warn(`ownership_invalid_binding (https://svelte.dev/e/ownership_invalid_binding)`);
	}
}

/**
 * %component% mutated a value owned by %owner%. This is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead
 * @param {string | undefined | null} [component]
 * @param {string | undefined | null} [owner]
 */
export function ownership_invalid_mutation(component, owner) {
	if (DEV) {
		console.warn(`%c[svelte] ownership_invalid_mutation\n%c${component ? `${component} mutated a value owned by ${owner}. This is strongly discouraged. Consider passing values to child components with \`bind:\`, or use a callback instead` : "Mutating a value outside the component that created it is strongly discouraged. Consider passing values to child components with `bind:`, or use a callback instead"}\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infoownership_invalid_mutation for more info`, bold, normal);
	} else {
		console.warn(`ownership_invalid_mutation (https://svelte.dev/e/ownership_invalid_mutation)`);
	}
}

/**
 * A `$:` statement (%location%) read reactive state that was not visible to the compiler. Updates to this state will not cause the statement to re-run. The behaviour of this code will change if you migrate it to runes mode
 * @param {string} location
 */
export function reactive_declaration_non_reactive_property(location) {
	if (DEV) {
		console.warn(`%c[svelte] reactive_declaration_non_reactive_property\n%cA \`$:\` statement (${location}) read reactive state that was not visible to the compiler. Updates to this state will not cause the statement to re-run. The behaviour of this code will change if you migrate it to runes mode\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infoownership_invalid_mutation for more inforeactive_declaration_non_reactive_property for more info`, bold, normal);
	} else {
		console.warn(`reactive_declaration_non_reactive_property (https://svelte.dev/e/reactive_declaration_non_reactive_property)`);
	}
}

/**
 * Reactive `$state(...)` proxies and the values they proxy have different identities. Because of this, comparisons with `%operator%` will produce unexpected results
 * @param {string} operator
 */
export function state_proxy_equality_mismatch(operator) {
	if (DEV) {
		console.warn(`%c[svelte] state_proxy_equality_mismatch\n%cReactive \`$state(...)\` proxies and the values they proxy have different identities. Because of this, comparisons with \`${operator}\` will produce unexpected results\nSee https://svelte.dev/e/binding_property_non_reactive for more infohydration_html_changed for more infohydration_mismatch for more infoownership_invalid_mutation for more infostate_proxy_equality_mismatch for more info`, bold, normal);
	} else {
		console.warn(`state_proxy_equality_mismatch (https://svelte.dev/e/state_proxy_equality_mismatch)`);
	}
}